C51 COMPILER V9.60.7.0   MAIN                                                              11/28/2023 00:05:52 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*------------------------------------------------------------------------------
   2          HELLO.C - adapted for the P89LPC932 and the Keil MCB900 Microcontroller Board
   3          
   4          Copyright 1995-2005 Keil Software, Inc.
   5          ------------------------------------------------------------------------------*/
   6          
   7          #include <REG922.H>               /* special function register declarations   */
   8                                            /* for the Philips P89C932 device           */
   9          #include "utilities.h"
  10          
  11          #define CONF_CMD_BUF_SIZE 12
  12          
  13          //":B AABBCCDD"
  14          char cmd_buffer[CONF_CMD_BUF_SIZE + 1];
  15          char cmd_index = 0;
  16          
  17          struct DisplayBits {
  18              unsigned char digit_0;
  19              unsigned char digit_1;
  20              unsigned char digit_2;
  21              union {
  22                unsigned char c;
  23                struct {
  24                  unsigned char neg : 1;
  25                  unsigned char celcius : 1;
  26                  unsigned char dot_celcius : 1;
  27                  unsigned char dot_0 : 1;
  28                  unsigned char dot_1 : 1;
  29                  unsigned char dot_2 : 1;
  30                  unsigned char dot_3 : 1;
  31                } bits;
  32              } misc;
  33          
  34          } display;
  35          
  36          struct Context {
  37            unsigned char cmd_toggle : 1;
  38            unsigned char cmd_read : 1;
  39          } context;
  40          
  41          void isr(void) interrupt 4
  42          {
  43   1        char c;
  44   1        
  45   1        RI = 0;
  46   1        c = SBUF;
  47   1        if(context.cmd_read){
  48   2          if(cmd_index < CONF_CMD_BUF_SIZE){
  49   3            cmd_buffer[cmd_index++] = c;
  50   3            cmd_buffer[cmd_index] = 0;
  51   3          }
  52   2        } else if( c == ':' ){
  53   2          context.cmd_read = 1;
  54   2        }
C51 COMPILER V9.60.7.0   MAIN                                                              11/28/2023 00:05:52 PAGE 2   

  55   1      }
  56          
  57          /*
  58          #pragma vector=serial_tx
  59          __interrupt void tx_interrupt(){  
  60          }
  61          */
  62          void InitUART(){
  63   1        ES = 1;
  64   1        EA = 1;
  65   1        
  66   1        SCON = 0x50;                  // init UART
  67   1        SSTAT = 0x60; // separate rx interrupt
  68   1        
  69   1        //9600
  70   1        //BRGR0 = 0xF0;                 
  71   1        //BRGR1 = 0x02;   
  72   1        
  73   1        //115200
  74   1        BRGR0 = 48;
  75   1        BRGR1 = 0;
  76   1        
  77   1        BRGCON = 0x03;                // internal RC oscillator  
  78   1        TI = 0;
  79   1        RI = 0;
  80   1        
  81   1        
  82   1        
  83   1      }
  84          
  85          void InitDisplay(){
  86   1        int i = 0;
  87   1        display.digit_0 = 0;
  88   1        display.digit_1 = 0;
  89   1        display.digit_2 = 0;
  90   1        
  91   1        display.misc.bits.neg = 0;
  92   1        display.misc.bits.celcius = 0;
  93   1        display.misc.bits.dot_celcius = 0;
  94   1        display.misc.bits.dot_0 = 0;
  95   1        display.misc.bits.dot_1 = 0;
  96   1        display.misc.bits.dot_2 = 0;
  97   1        display.misc.bits.dot_3 = 0;
  98   1      }
  99          
 100          void InitContext(){
 101   1        context.cmd_read = 0;
 102   1      }
 103          
 104          void ResetDisplay(){
 105   1        P0M1 = 0xFF;
 106   1        P0M2 = 0x00;
 107   1        P1M1 |= 0xC0;
 108   1        P1M2 &= 0x3F;
 109   1        P0 = 0xFF;
 110   1        P1 |= 0xC0;
 111   1      }
 112          
 113          void SetLow(int index){
 114   1        switch(index){
 115   2        case 0:
 116   2          P0M1 &= 0xFE;
C51 COMPILER V9.60.7.0   MAIN                                                              11/28/2023 00:05:52 PAGE 3   

 117   2          P0M2 |= 0x01;
 118   2          P0 &= 0xFE;
 119   2          break;
 120   2        case 1:
 121   2          P0M1 &= 0xFD;
 122   2          P0M2 |= 0x02;
 123   2          P0 &= 0xFD;
 124   2          break;
 125   2        case 2:
 126   2          P0M1 &= 0xFB;
 127   2          P0M2 |= 0x04;
 128   2          P0 &= 0xFB;
 129   2          break;
 130   2        case 3:
 131   2          P0M1 &= 0xF7;
 132   2          P0M2 |= 0x08;
 133   2          P0 &= 0xF7;
 134   2          break;
 135   2        case 4:
 136   2          P0M1 &= 0xBF;
 137   2          P0M2 |= 0x40;
 138   2          P0 &= 0xBF;
 139   2          break;
 140   2        case 5:
 141   2          P0M1 &= 0x7F;
 142   2          P0M2 |= 0x80;
 143   2          P0 &= 0x7F;
 144   2          break;
 145   2        case 6:
 146   2          P1M1 &= 0x7F;
 147   2          P1M2 |= 0x80;
 148   2          P1 &= 0x7F;
 149   2          break;
 150   2        }
 151   1      }
 152          
 153          void SetHigh(int index){
 154   1        switch(index){
 155   2        case 0:
 156   2          P0M1 &= 0xFE;
 157   2          P0M2 |= 0x01;
 158   2          P0 |= 0x01;
 159   2          break;
 160   2        case 1:
 161   2          P0M1 &= 0xFD;
 162   2          P0M2 |= 0x02;
 163   2          P0 |= 0x02;
 164   2          break;
 165   2        case 2:
 166   2          P0M1 &= 0xFB;
 167   2          P0M2 |= 0x04;
 168   2          P0 |= 0x04;
 169   2          break;
 170   2        case 3:
 171   2          P0M1 &= 0xF7;
 172   2          P0M2 |= 0x08;
 173   2          P0 |= 0x08;
 174   2          break;
 175   2        case 4:
 176   2          P0M1 &= 0xBF;
 177   2          P0M2 |= 0x40;
 178   2          P0 |= 0x40;
C51 COMPILER V9.60.7.0   MAIN                                                              11/28/2023 00:05:52 PAGE 4   

 179   2          break;
 180   2        case 5:
 181   2          P0M1 &= 0x7F;
 182   2          P0M2 |= 0x80;
 183   2          P0 |= 0x80;
 184   2          break;
 185   2        case 6:
 186   2          P1M1 &= 0x7F;
 187   2          P1M2 |= 0x80;
 188   2          P1 |= 0x80;
 189   2          break;
 190   2        }
 191   1      }
 192          
 193          void EnableDisplay(int index_a, int index_b){
 194   1        ResetDisplay();
 195   1        if(index_a != index_b && index_a < 7 && index_b < 7){
 196   2          SetLow(index_a);
 197   2          SetHigh(index_b);
 198   2        }
 199   1      }
 200          
 201          void SetDisplay(char enable, int index_a, int index_b){
 202   1        ResetDisplay();
 203   1        
 204   1        if(enable){
 205   2          if(index_a != index_b && index_a < 7 && index_b < 7){
 206   3            SetLow(index_a);
 207   3            SetHigh(index_b);
 208   3          }
 209   2        }
 210   1        //if(updater)
 211   1          //updater();
 212   1      }
 213          
 214          void UpdateDisplay(){
 215   1        //Digit 1
 216   1        SetDisplay(display.digit_0 & 1, 0, 1);
 217   1        SetDisplay(display.digit_0 & 2, 0, 2);
 218   1        SetDisplay(display.digit_0 & 4, 3, 0);
 219   1        SetDisplay(display.digit_0 & 8, 4, 0);
 220   1        SetDisplay(display.digit_0 & 16, 0, 3);
 221   1        SetDisplay(display.digit_0 & 32, 1, 0);
 222   1        SetDisplay(display.digit_0 & 64, 2, 0);
 223   1        SetDisplay(display.digit_0 & 128, 4, 5);
 224   1        
 225   1        //Digit 2
 226   1        SetDisplay(display.digit_1 & 1, 1, 2);
 227   1        SetDisplay(display.digit_1 & 2, 1, 3);
 228   1        SetDisplay(display.digit_1 & 4, 4, 1);
 229   1        SetDisplay(display.digit_1 & 8, 1, 5);
 230   1        SetDisplay(display.digit_1 & 16, 1, 4);
 231   1        SetDisplay(display.digit_1 & 32, 2, 1);
 232   1        SetDisplay(display.digit_1 & 64, 3, 1);
 233   1        SetDisplay(display.digit_1 & 128, 2, 5);
 234   1        
 235   1        //Digit 3
 236   1        SetDisplay(display.digit_2 & 1, 4, 3);
 237   1        SetDisplay(display.digit_2 & 2, 2, 4);
 238   1        SetDisplay(display.digit_2 & 4, 3, 4);
 239   1        SetDisplay(display.digit_2 & 8, 5, 0);
 240   1        SetDisplay(display.digit_2 & 16, 5, 2);
C51 COMPILER V9.60.7.0   MAIN                                                              11/28/2023 00:05:52 PAGE 5   

 241   1        SetDisplay(display.digit_2 & 32, 3, 2);
 242   1        SetDisplay(display.digit_2 & 64, 4, 2);
 243   1        SetDisplay(display.digit_2 & 128, 2, 3);
 244   1        
 245   1        SetDisplay(display.misc.bits.neg, 5, 3);
 246   1        
 247   1        SetDisplay(display.misc.bits.dot_celcius, 3, 5);
 248   1        SetDisplay(display.misc.bits.celcius, 5, 4);
 249   1        
 250   1        SetDisplay(display.misc.bits.dot_0, 6, 5);
 251   1        SetDisplay(display.misc.bits.dot_1, 5, 6);
 252   1        SetDisplay(display.misc.bits.dot_2, 4, 6);
 253   1        SetDisplay(display.misc.bits.dot_3, 6, 4);
 254   1        
 255   1      }
 256          
 257          void Print(const char *s){
 258   1        char* i = s;
 259   1        //while(!SCON_bit.TI);
 260   1        //SCON_bit.TI = 0;
 261   1        //for(int i = 0; s[i] != 0; ++i){
 262   1        for(; *i != 0; ++i){
 263   2          //while(!SCON_bit.RI);                  // wait until reception is complete
 264   2          //SCON_bit.RI = 0;    
 265   2          //char ch = SBUF;
 266   2          SBUF = *i;
 267   2          while(!TI);
 268   2          TI = 0;
 269   2        }
 270   1      }
 271          
 272          void Delayer(){
 273   1        int i = 0;
 274   1        for(; i < 100; ++i);
 275   1      }
 276          
 277          void DisplayFloatString(char* str){
 278   1        int i = 0;
 279   1        for(i = 0; i < 3; ++i){
 280   2          if(!((str[i] >= '0' && str[i] <= '9')))
 281   2            break;
 282   2        }
 283   1        --i;
 284   1        if(i >= 0)
 285   1          display.digit_2 = DigitToLEDBits(str[i--]);
 286   1        
 287   1        if(i >= 0)
 288   1          display.digit_1 = DigitToLEDBits(str[i--]);
 289   1        
 290   1        if(i >= 0)
 291   1          display.digit_0 = DigitToLEDBits(str[i--]);
 292   1      }
 293          
 294          void CheckCommand(){
 295   1        if(cmd_index > 0){
 296   2          switch(cmd_buffer[0]){
 297   3            //B AABBFFDD
 298   3            case 'B':
 299   3              if(cmd_index >= 10){
 300   4                
 301   4                display.digit_0 = HexPairToInt(cmd_buffer[3], cmd_buffer[2]);
 302   4                display.digit_1 = HexPairToInt(cmd_buffer[5], cmd_buffer[4]);
C51 COMPILER V9.60.7.0   MAIN                                                              11/28/2023 00:05:52 PAGE 6   

 303   4                display.digit_2 = HexPairToInt(cmd_buffer[7], cmd_buffer[6]);
 304   4                display.misc.c = HexPairToInt(cmd_buffer[9], cmd_buffer[8]);
 305   4                
 306   4                cmd_index = 0;
 307   4                context.cmd_read = 0;
 308   4              }
 309   3              break;
 310   3            //F 0.0
 311   3            //F +0.0
 312   3            //F -0.0
 313   3            //F 0
 314   3            case 'F': {
 315   4              char* p = cmd_buffer + 2;
 316   4              display.misc.bits.neg = 0;
 317   4              display.digit_0 = display.digit_1 = display.digit_2 = 0;
 318   4              
 319   4              if(*p == '-'){
 320   5                display.misc.bits.neg = 1;
 321   5                ++p;
 322   5              } else if(*p == '+')
 323   4                ++p;
 324   4              DisplayFloatString(p);
 325   4              
 326   4              cmd_index = 0;
 327   4              context.cmd_read = 0;
 328   4            }
 329   3              break;
 330   3          }
 331   2        }
 332   1      }
 333          
 334          int main(){
 335   1        int x = 0, y = 0, z = 0;
 336   1        
 337   1        P0M1 = 0xFC;                  // P0 in input only mode if no activity 
 338   1        P0M2 = 0x03;  
 339   1        P3M1 = 0xFF;
 340   1        P3M2 = 0x00;
 341   1        
 342   1        //P1M1 = 0xF2;
 343   1        //P1M2 = 0x0C;
 344   1        
 345   1        //P1 = 0x04;
 346   1        
 347   1        P1M1 = 0xFE;
 348   1        P1M2 = 0x00;
 349   1        
 350   1        P0 = 0xFD;
 351   1        
 352   1        InitUART();
 353   1        InitDisplay();
 354   1        InitContext();
 355   1        
 356   1        //display.digit[0] = 0x3F;
 357   1        //display.digit[1] = 0x3F;
 358   1        //display.digit[2] = 0xBF;
 359   1        for(;;){
 360   2          //uart_received_int = 1;
 361   2          //if(uart_received_int){
 362   2            //SBUF = uart_received; 
 363   2            //while(!TI);
 364   2            //TI = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              11/28/2023 00:05:52 PAGE 7   

 365   2            //uart_received_int = 0;
 366   2          //}
 367   2         
 368   2          CheckCommand();
 369   2          UpdateDisplay();
 370   2        }
 371   1        return 0;
 372   1        
 373   1      }
*** WARNING C294 IN LINE 371 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1186    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
